#include <stdio.h>

void swap(int *a, int *b) {
    int t=*a; *a=*b; *b=t;
}

// Insertion Sort
void insertionSort(int arr[], int n) {
    for(int i=1; i<n; i++) {
        int key=arr[i], j=i-1;
        while(j>=0 && arr[j]>key) {
            arr[j+1]=arr[j];
            j--;
        }
        arr[j+1]=key;
    }
}

// Merge Sort
void merge(int arr[], int l, int m, int r) {
    int n1=m-l+1, n2=r-m;
    int L[n1], R[n2];
    for(int i=0;i<n1;i++) L[i]=arr[l+i];
    for(int j=0;j<n2;j++) R[j]=arr[m+1+j];

    int i=0,j=0,k=l;
    while(i<n1 && j<n2)
        arr[k++]=(L[i]<=R[j])?L[i++]:R[j++];
    while(i<n1) arr[k++]=L[i++];
    while(j<n2) arr[k++]=R[j++];
}
void mergeSort(int arr[], int l, int r) {
    if(l<r) {
        int m=(l+r)/2;
        mergeSort(arr,l,m);
        mergeSort(arr,m+1,r);
        merge(arr,l,m,r);
    }
}

// Quick Sort
int partition(int arr[], int low, int high) {
    int pivot=arr[high];
    int i=low-1;
    for(int j=low;j<high;j++) {
        if(arr[j]<pivot) {
            i++;
            swap(&arr[i],&arr[j]);
        }
    }
    swap(&arr[i+1],&arr[high]);
    return i+1;
}
void quickSort(int arr[], int low, int high) {
    if(low<high) {
        int pi=partition(arr,low,high);
        quickSort(arr,low,pi-1);
        quickSort(arr,pi+1,high);
    }
}

// Heap Sort
void heapify(int arr[], int n, int i) {
    int largest=i, l=2*i+1, r=2*i+2;
    if(l<n && arr[l]>arr[largest]) largest=l;
    if(r<n && arr[r]>arr[largest]) largest=r;
    if(largest!=i) {
        swap(&arr[i],&arr[largest]);
        heapify(arr,n,largest);
    }
}
void heapSort(int arr[], int n) {
    for(int i=n/2-1;i>=0;i--)
        heapify(arr,n,i);
    for(int i=n-1;i>=0;i--) {
        swap(&arr[0],&arr[i]);
        heapify(arr,i,0);
    }
}

void printArray(int arr[], int n) {
    for(int i=0;i<n;i++) printf("%d ",arr[i]);
    printf("\n");
}

int main() {
    int arr[]={12,11,13,5,6,7};
    int n=6;

    int arr1[6],arr2[6],arr3[6],arr4[6];
    for(int i=0;i<n;i++) {
        arr1[i]=arr2[i]=arr3[i]=arr4[i]=arr[i];
    }

    insertionSort(arr1,n);
    printf("Insertion Sort: "); printArray(arr1,n);

    mergeSort(arr2,0,n-1);
    printf("Merge Sort: "); printArray(arr2,n);

    quickSort(arr3,0,n-1);
    printf("Quick Sort: "); printArray(arr3,n);

    heapSort(arr4,n);
    printf("Heap Sort: "); printArray(arr4,n);

    return 0;
}
